#!/usr/bin/env python

"""
Utility to show git graph diff.
"""

import sys
import subprocess
import os
import pydot
import git
import graphdiff


DIR_PATH = os.path.dirname(os.path.realpath(__file__))
COLOR_SCRIPT_PATH = os.path.join(DIR_PATH, "diff-graph-color")


def get_diff_for_file(repo, path):
    """
    Return the diff between the current status of the file and the head.
    """
    hcommit = repo.head.commit
    for diff in hcommit.diff(None):
        if diff.a_path == path or diff.b_path == path:
            return diff
    return None


def get_path_commit_diffs(repo, path):
    """
    This function returns a generator which iterates through all commits of
    the repository located in the given path for the given branch. It yields
    file diff information to show a timeseries of file changes.
    """
    for commit in repo.iter_commits():
        if commit.parents:
            all_diffs = commit.diff(commit.parents[0])
        else:
            all_diffs = commit.diff(None)

        for diff in all_diffs:
            if diff.a_path == path or diff.b_path == path:
                yield commit, diff


def print_graph(graph):
    """
    Print the given graph.
    """
    pydot_graph = graphdiff.to_dot(graph)
    proc = subprocess.Popen([COLOR_SCRIPT_PATH], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    proc.stdin.write(pydot_graph.to_string().encode("utf-8"))
    out, _ = proc.communicate()
    print(out.decode("utf-8"))


def load_graph_from_blob(blob):
    """
    Loads and returns the graph from the given diff blob.
    """
    blob_bytes = blob.data_stream.read()
    # TODO: handle more than one graph
    blob_dot_graph = pydot.graph_from_dot_data(blob_bytes.decode("utf-8"))[0]
    return graphdiff.from_dot(blob_dot_graph)


def main(mode, path):
    """
    Main function of the module
    """
    # Create the repository, raises an error if it isn't one.
    repo = git.Repo("./")

    if mode == "diff":
        diff = get_diff_for_file(repo, path)
        if diff:
            a_graph = graphdiff.Graph()
            if diff.a_blob:
                a_graph = load_graph_from_blob(diff.a_blob)
            b_graph = graphdiff.from_dot(pydot.graph_from_dot_file(path)[0])
            print_graph(graphdiff.generate_diff_graph(a_graph, b_graph))
    elif mode == "log":
        for commit, diff in get_path_commit_diffs(repo, path):
            a_graph = graphdiff.Graph()
            if diff.a_blob:
                a_graph = load_graph_from_blob(diff.a_blob)

            b_graph = graphdiff.Graph()
            if diff.b_blob:
                b_graph = load_graph_from_blob(diff.b_blob)
            print("commit {}".format(commit.hexsha))
            print("Author: {} <{}>".format(commit.author.name, commit.author.email))
            print("Date: {}".format(commit.authored_datetime.strftime("%a %b %d %H:%M:%S %Y")))
            print()
            print_graph(graphdiff.generate_diff_graph(b_graph, a_graph))


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
